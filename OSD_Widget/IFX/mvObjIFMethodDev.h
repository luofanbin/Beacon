/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp /home/beacon/Qt/OSD_Widget/IFX/mvObjIFMethodDev.xml -i mvobj.h -p /home/beacon/Qt/OSD_Widget/IFX/mvObjIFMethodDev
 *
 * qdbusxml2cpp is Copyright (C) 2019 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MVOBJIFMETHODDEV_H
#define MVOBJIFMETHODDEV_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "mvobj.h"

/*
 * Proxy class for interface mv.mvapp.dev.fans
 */
class MvMvappDevFansInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "mv.mvapp.dev.fans"; }

public:
    MvMvappDevFansInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MvMvappDevFansInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<stFans_INFO> GetOnOff(uchar fan_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(fan_id);
        return asyncCallWithArgumentList(QStringLiteral("GetOnOff"), argumentList);
    }

    inline QDBusPendingReply<stFans_INFO> GetTemper(uchar testpoint_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(testpoint_id);
        return asyncCallWithArgumentList(QStringLiteral("GetTemper"), argumentList);
    }

    inline QDBusPendingReply<> SetOnOff(stFans_INFO fan_id_onoff)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(fan_id_onoff);
        return asyncCallWithArgumentList(QStringLiteral("SetOnOff"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void SigSetOnOff(stFans_INFO fan_id_onoff);
};

/*
 * Proxy class for interface mv.mvapp.dev.stat
 */
class MvMvappDevStatInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "mv.mvapp.dev.stat"; }

public:
    MvMvappDevStatInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MvMvappDevStatInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<stCfg_Ver_INFO> GetDevCfg(uchar cfg_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cfg_id);
        return asyncCallWithArgumentList(QStringLiteral("GetDevCfg"), argumentList);
    }

    inline QDBusPendingReply<stFans_INFO> GetDevStat(uchar stat_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(stat_id);
        return asyncCallWithArgumentList(QStringLiteral("GetDevStat"), argumentList);
    }

    inline QDBusPendingReply<> Reset(uchar submod_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(submod_id);
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

    inline QDBusPendingReply<uchar> Restore(uchar cfg_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cfg_id);
        return asyncCallWithArgumentList(QStringLiteral("Restore"), argumentList);
    }

    inline QDBusPendingReply<uchar> SetDevCfg(stCfg_Ver_INFO cfg_id_file)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cfg_id_file);
        return asyncCallWithArgumentList(QStringLiteral("SetDevCfg"), argumentList);
    }

    inline QDBusPendingReply<> SetPreCfg(uchar cfg_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cfg_id);
        return asyncCallWithArgumentList(QStringLiteral("SetPreCfg"), argumentList);
    }

    inline QDBusPendingReply<> ShutDown()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ShutDown"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void SigRestore(uchar cfg_id);
    void SigSetDevCfg(stCfg_Ver_INFO cfg_id_file);
};

/*
 * Proxy class for interface mv.mvapp.dev.ver
 */
class MvMvappDevVerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "mv.mvapp.dev.ver"; }

public:
    MvMvappDevVerInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MvMvappDevVerInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<stCfg_Ver_INFO> GetDevSN(uchar sn_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sn_id);
        return asyncCallWithArgumentList(QStringLiteral("GetDevSN"), argumentList);
    }

    inline QDBusPendingReply<stCfg_Ver_INFO> GetVerCode(uchar ver_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ver_id);
        return asyncCallWithArgumentList(QStringLiteral("GetVerCode"), argumentList);
    }

    inline QDBusPendingReply<> SetDevSN(stCfg_Ver_INFO sn_id_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sn_id_val);
        return asyncCallWithArgumentList(QStringLiteral("SetDevSN"), argumentList);
    }

    inline QDBusPendingReply<QString> UpdateVer(stCfg_Ver_INFO ver_id_locat)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ver_id_locat);
        return asyncCallWithArgumentList(QStringLiteral("UpdateVer"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void SigUpdateVer(uchar ver_id_process);
};

namespace mv {
  namespace mvapp {
    namespace dev {
      typedef ::MvMvappDevFansInterface fans;
      typedef ::MvMvappDevStatInterface stat;
      typedef ::MvMvappDevVerInterface ver;
    }
  }
}
#endif
