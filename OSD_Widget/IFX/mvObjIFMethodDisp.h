/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp /home/beacon/11/OSD_Widget/IFX/mvObjIFMethodDisp.xml -i mvobj.h -p /home/beacon/11/OSD_Widget/IFX/mvObjIFMethodDisp
 *
 * qdbusxml2cpp is Copyright (C) 2019 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MVOBJIFMETHODDISP_H
#define MVOBJIFMETHODDISP_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "mvobj.h"

/*
 * Proxy class for interface mv.mvapp.disp.grbi
 */
class MvMvappDispGrbiInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "mv.mvapp.disp.grbi"; }

public:
    MvMvappDispGrbiInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MvMvappDispGrbiInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<stGrabImage_INFO> AskWorkList(uchar src_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(src_id);
        return asyncCallWithArgumentList(QStringLiteral("AskWorkList"), argumentList);
    }

    inline QDBusPendingReply<stGrabImage_INFO> DeleteImage(uchar src_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(src_id);
        return asyncCallWithArgumentList(QStringLiteral("DeleteImage"), argumentList);
    }

    inline QDBusPendingReply<stDEVCOMM_SVR> GetDicomRisSvr()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetDicomRisSvr"), argumentList);
    }

    inline QDBusPendingReply<stDEVCOMM_SVR> GetDicomStorSvr()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetDicomStorSvr"), argumentList);
    }

    inline QDBusPendingReply<uchar> GetFrozSpan()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetFrozSpan"), argumentList);
    }

    inline QDBusPendingReply<uchar> GetGrabIndcatorSel()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetGrabIndcatorSel"), argumentList);
    }

    inline QDBusPendingReply<> GetPatientInfo()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetPatientInfo"), argumentList);
    }

    inline QDBusPendingReply<Work_List_Val> GetWorkList(uchar src_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(src_id);
        return asyncCallWithArgumentList(QStringLiteral("GetWorkList"), argumentList);
    }

    inline QDBusPendingReply<uchar> GrabImgActive(uchar active_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(active_val);
        return asyncCallWithArgumentList(QStringLiteral("GrabImgActive"), argumentList);
    }

    inline QDBusPendingReply<stGrabImage_INFO> ImgFreeMemSiz(uchar src_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(src_id);
        return asyncCallWithArgumentList(QStringLiteral("ImgFreeMemSiz"), argumentList);
    }

    inline QDBusPendingReply<stGrabImage_INFO> NoSendImgNum(uchar src_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(src_id);
        return asyncCallWithArgumentList(QStringLiteral("NoSendImgNum"), argumentList);
    }

    inline QDBusPendingReply<> SetDicomRisSvr(stDEVCOMM_SVR Ris_Svr_Val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(Ris_Svr_Val);
        return asyncCallWithArgumentList(QStringLiteral("SetDicomRisSvr"), argumentList);
    }

    inline QDBusPendingReply<> SetDicomStorSvr(stDEVCOMM_SVR Store_Svr_Val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(Store_Svr_Val);
        return asyncCallWithArgumentList(QStringLiteral("SetDicomStorSvr"), argumentList);
    }

    inline QDBusPendingReply<> SetFrozSpan(stFans_INFO span_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(span_val);
        return asyncCallWithArgumentList(QStringLiteral("SetFrozSpan"), argumentList);
    }

    inline QDBusPendingReply<> SetGrabIndcatorSel(uchar span_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(span_val);
        return asyncCallWithArgumentList(QStringLiteral("SetGrabIndcatorSel"), argumentList);
    }

    inline QDBusPendingReply<> SetNewPatient()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("SetNewPatient"), argumentList);
    }

    inline QDBusPendingReply<stGrabImage_INFO> SingleGrabStart(stSingleGrabStart_In ret_cnt)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(ret_cnt);
        return asyncCallWithArgumentList(QStringLiteral("SingleGrabStart"), argumentList);
    }

    inline QDBusPendingReply<stGrabImage_INFO> SingleGrabStored(uchar src_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(src_id);
        return asyncCallWithArgumentList(QStringLiteral("SingleGrabStored"), argumentList);
    }

    inline QDBusPendingReply<> StartFrozen()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("StartFrozen"), argumentList);
    }

    inline QDBusPendingReply<> StopFrozen()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("StopFrozen"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void SigAskWorkList(stGrabImage_INFO src_id_Work_List_Stat);
    void SigSetDicomRisSvr(stDEVCOMM_SVR Ris_Svr_Val);
    void SigSetDicomStorSvr(stDEVCOMM_SVR Store_Svr_Val);
    void SigSetFrozSpan(stFans_INFO span_val);
    void SigSetGrabIndcatorSel(uchar span_val);
    void SigSetNewPatient();
    void SigSingleGrabStart(stGrabImageStaus_INFO ret_cnt);
    void SigSingleGrabStored(stGrabImage_INFO ret_cnt);
};

/*
 * Proxy class for interface mv.mvapp.disp.osd
 */
class MvMvappDispOsdInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "mv.mvapp.disp.osd"; }

public:
    MvMvappDispOsdInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MvMvappDispOsdInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<uchar> GetAlpha()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAlpha"), argumentList);
    }

    inline QDBusPendingReply<stColorKey> GetColorKey()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetColorKey"), argumentList);
    }

    inline QDBusPendingReply<stOsdOnOff_Info> GetOnOff(uchar fpgaid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(fpgaid);
        return asyncCallWithArgumentList(QStringLiteral("GetOnOff"), argumentList);
    }

    inline QDBusPendingReply<uchar> GetRemoteMouseOnOff()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetRemoteMouseOnOff"), argumentList);
    }

    inline QDBusPendingReply<stOsdOnOff_Info> GetScanListOnOff(uchar fpgaid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(fpgaid);
        return asyncCallWithArgumentList(QStringLiteral("GetScanListOnOff"), argumentList);
    }

    inline QDBusPendingReply<stOsdOnOff_Info> GetSmallOsdOnOff(uchar fpgaid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(fpgaid);
        return asyncCallWithArgumentList(QStringLiteral("GetSmallOsdOnOff"), argumentList);
    }

    inline QDBusPendingReply<uchar> GetSpan()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetSpan"), argumentList);
    }

    inline QDBusPendingReply<> SetAlpha(uchar alpha_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(alpha_val);
        return asyncCallWithArgumentList(QStringLiteral("SetAlpha"), argumentList);
    }

    inline QDBusPendingReply<> SetColorKey(stColorKey colorkey_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(colorkey_val);
        return asyncCallWithArgumentList(QStringLiteral("SetColorKey"), argumentList);
    }

    inline QDBusPendingReply<> SetOnOff(stOsdOnOff_Info osd_onoff)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(osd_onoff);
        return asyncCallWithArgumentList(QStringLiteral("SetOnOff"), argumentList);
    }

    inline QDBusPendingReply<> SetRemoteMouseOnOff(uchar remotemouseonoff_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(remotemouseonoff_val);
        return asyncCallWithArgumentList(QStringLiteral("SetRemoteMouseOnOff"), argumentList);
    }

    inline QDBusPendingReply<> SetScanListOnOff(stOsdOnOff_Info scanlist_onoff)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(scanlist_onoff);
        return asyncCallWithArgumentList(QStringLiteral("SetScanListOnOff"), argumentList);
    }

    inline QDBusPendingReply<> SetSmallOsdOnOff(stOsdOnOff_Info smallosd_onoff)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(smallosd_onoff);
        return asyncCallWithArgumentList(QStringLiteral("SetSmallOsdOnOff"), argumentList);
    }

    inline QDBusPendingReply<> SetSpan(uchar span_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(span_val);
        return asyncCallWithArgumentList(QStringLiteral("SetSpan"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void SigSetAlpha(uchar alpha_val);
    void SigSetColorKey(stColorKey colorkey_val);
    void SigSetOnOff(stOsdOnOff_Info osd_onoff);
    void SigSetRemoteMouseOnOff(uchar remotemouseonoff_val);
    void SigSetScanListOnOff(stOsdOnOff_Info scanlist_onoff);
    void SigSetSmallOsdOnOff(stOsdOnOff_Info smallosd_onoff);
    void SigSetSpan(uchar span_val);
};

/*
 * Proxy class for interface mv.mvapp.disp.router
 */
class MvMvappDispRouterInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "mv.mvapp.disp.router"; }

public:
    MvMvappDispRouterInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MvMvappDispRouterInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<int> GetInterlaceVideo()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetInterlaceVideo"), argumentList);
    }

    inline QDBusPendingReply<stRouter> GetRouter(uchar vidout_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(vidout_id);
        return asyncCallWithArgumentList(QStringLiteral("GetRouter"), argumentList);
    }

    inline QDBusPendingReply<uchar> GetSwtOutput()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetSwtOutput"), argumentList);
    }

    inline QDBusPendingReply<> SetInterlaceVideo(int id_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id_val);
        return asyncCallWithArgumentList(QStringLiteral("SetInterlaceVideo"), argumentList);
    }

    inline QDBusPendingReply<> SetRouter(stRouter_In route_id_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(route_id_val);
        return asyncCallWithArgumentList(QStringLiteral("SetRouter"), argumentList);
    }

    inline QDBusPendingReply<> SetSwtOutput()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("SetSwtOutput"), argumentList);
    }

    inline QDBusPendingReply<stSwtNextInput_INFO> SwtNextInput(SwitchNextSigIn route_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(route_id);
        return asyncCallWithArgumentList(QStringLiteral("SwtNextInput"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void SigSetInterlaceVideo(int id_val);
    void SigSetRouteNotice(uchar output_val);
    void SigSetRouter(stRouter_Out route_id_val);
    void SigSetSwtOutput(uchar output_val);
    void SigSwtNextInput(SwitchNextSigOut route_id_val);
};

namespace mv {
  namespace mvapp {
    namespace disp {
      typedef ::MvMvappDispGrbiInterface grbi;
      typedef ::MvMvappDispOsdInterface osd;
      typedef ::MvMvappDispRouterInterface router;
    }
  }
}
#endif
