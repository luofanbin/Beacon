/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp /home/beacon/Qt/OSD_Widget/IFX/mvObjIFMethodVidPort.xml -i mvobj.h -p /home/beacon/Qt/OSD_Widget/IFX/mvObjIFMethodVidPort
 *
 * qdbusxml2cpp is Copyright (C) 2019 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MVOBJIFMETHODVIDPORT_H
#define MVOBJIFMETHODVIDPORT_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "mvobj.h"

/*
 * Proxy class for interface mv.mvapp.vidport.vout
 */
class MvMvappVidportVoutInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "mv.mvapp.vidport.vout"; }

public:
    MvMvappVidportVoutInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MvMvappVidportVoutInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<gtOutSig_INFO> VoutPortGetOnoff(stOutSig_INFO portgid_id_Onoff)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(portgid_id_Onoff);
        return asyncCallWithArgumentList(QStringLiteral("VoutPortGetOnoff"), argumentList);
    }

    inline QDBusPendingReply<stOutSig_INFO> VoutPortGetSdiType(int portgid_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(portgid_id);
        return asyncCallWithArgumentList(QStringLiteral("VoutPortGetSdiType"), argumentList);
    }

    inline QDBusPendingReply<gtOutSig_INFO> VoutPortGetStatus(stOutSig_INFO portgid_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(portgid_id);
        return asyncCallWithArgumentList(QStringLiteral("VoutPortGetStatus"), argumentList);
    }

    inline QDBusPendingReply<gtOutSig_INFO> VoutPortGetTimingPref(stOutSig_INFO portgid_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(portgid_id);
        return asyncCallWithArgumentList(QStringLiteral("VoutPortGetTimingPref"), argumentList);
    }

    inline QDBusPendingReply<gtOutSig_INFO> VoutPortGetType(stOutSig_INFO portgid_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(portgid_id);
        return asyncCallWithArgumentList(QStringLiteral("VoutPortGetType"), argumentList);
    }

    inline QDBusPendingReply<> VoutPortSetOnoff(PortStatus portgid_id_Onoff)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(portgid_id_Onoff);
        return asyncCallWithArgumentList(QStringLiteral("VoutPortSetOnoff"), argumentList);
    }

    inline QDBusPendingReply<> VoutPortSetSdiType(stOutSig_INFO portgid_id_SDIType)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(portgid_id_SDIType);
        return asyncCallWithArgumentList(QStringLiteral("VoutPortSetSdiType"), argumentList);
    }

    inline QDBusPendingReply<> VoutPortSetTimingPref(gtOutSig_INFO portgid_id_timingpref)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(portgid_id_timingpref);
        return asyncCallWithArgumentList(QStringLiteral("VoutPortSetTimingPref"), argumentList);
    }

    inline QDBusPendingReply<> VoutPortSetType(gtOutSig_INFO portgid_id_type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(portgid_id_type);
        return asyncCallWithArgumentList(QStringLiteral("VoutPortSetType"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void SignalVOutPortSetSdiType(stOutSig_INFO signalportgid_id_SDIType);
    void SignalVOutPortSetTimingPref(gtOutSig_INFO Signalportgid_id_timingpref);
    void SignalVOutPortSetType(gtOutSig_INFO signalportgid_id_type);
    void SignalVoutPortSetOnoff(PortStatus signalportgid_id_Onoff);
};

namespace mv {
  namespace mvapp {
    namespace vidport {
      typedef ::MvMvappVidportVoutInterface vout;
    }
  }
}
#endif
