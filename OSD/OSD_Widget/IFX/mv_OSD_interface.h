/*
 * Generated by gdbus-codegen 2.48.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __MV_OSD_INTERFACE_H__
#define __MV_OSD_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for mv.mvapp.osd.server */

#define TYPE_MV_MVAPP_OSD_SERVER (mv_mvapp_osd_server_get_type ())
#define MV_MVAPP_OSD_SERVER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MV_MVAPP_OSD_SERVER, MvMvappOsdServer))
#define IS_MV_MVAPP_OSD_SERVER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MV_MVAPP_OSD_SERVER))
#define MV_MVAPP_OSD_SERVER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_MV_MVAPP_OSD_SERVER, MvMvappOsdServerIface))

struct _MvMvappOsdServer;
typedef struct _MvMvappOsdServer MvMvappOsdServer;
typedef struct _MvMvappOsdServerIface MvMvappOsdServerIface;

struct _MvMvappOsdServerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_disposd__get_disp_on_off) (
    MvMvappOsdServer *object,
    GDBusMethodInvocation *invocation,
    gint arg_input_array);

  gboolean (*handle_disposd__get_disp_span) (
    MvMvappOsdServer *object,
    GDBusMethodInvocation *invocation,
    gint arg_input_array);

  gboolean (*handle_disposd__set_disp_on_off) (
    MvMvappOsdServer *object,
    GDBusMethodInvocation *invocation,
    gint arg_input_array);

  gboolean (*handle_disposd__set_disp_span) (
    MvMvappOsdServer *object,
    GDBusMethodInvocation *invocation,
    gint arg_input_array);

  gboolean (*handle_disposd__set_msg) (
    MvMvappOsdServer *object,
    GDBusMethodInvocation *invocation,
    gint arg_input_array);

};

GType mv_mvapp_osd_server_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *mv_mvapp_osd_server_interface_info (void);
guint mv_mvapp_osd_server_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void mv_mvapp_osd_server_complete_disposd__get_disp_on_off (
    MvMvappOsdServer *object,
    GDBusMethodInvocation *invocation,
    gint output_array,
    gint result);

void mv_mvapp_osd_server_complete_disposd__set_disp_on_off (
    MvMvappOsdServer *object,
    GDBusMethodInvocation *invocation,
    gint output_array,
    gint result);

void mv_mvapp_osd_server_complete_disposd__get_disp_span (
    MvMvappOsdServer *object,
    GDBusMethodInvocation *invocation,
    gint output_array,
    gint result);

void mv_mvapp_osd_server_complete_disposd__set_disp_span (
    MvMvappOsdServer *object,
    GDBusMethodInvocation *invocation,
    gint output_array,
    gint result);

void mv_mvapp_osd_server_complete_disposd__set_msg (
    MvMvappOsdServer *object,
    GDBusMethodInvocation *invocation,
    gint output_array,
    gint result);



/* D-Bus method calls: */
void mv_mvapp_osd_server_call_disposd__get_disp_on_off (
    MvMvappOsdServer *proxy,
    gint arg_input_array,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mv_mvapp_osd_server_call_disposd__get_disp_on_off_finish (
    MvMvappOsdServer *proxy,
    gint *out_output_array,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean mv_mvapp_osd_server_call_disposd__get_disp_on_off_sync (
    MvMvappOsdServer *proxy,
    gint arg_input_array,
    gint *out_output_array,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void mv_mvapp_osd_server_call_disposd__set_disp_on_off (
    MvMvappOsdServer *proxy,
    gint arg_input_array,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mv_mvapp_osd_server_call_disposd__set_disp_on_off_finish (
    MvMvappOsdServer *proxy,
    gint *out_output_array,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean mv_mvapp_osd_server_call_disposd__set_disp_on_off_sync (
    MvMvappOsdServer *proxy,
    gint arg_input_array,
    gint *out_output_array,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void mv_mvapp_osd_server_call_disposd__get_disp_span (
    MvMvappOsdServer *proxy,
    gint arg_input_array,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mv_mvapp_osd_server_call_disposd__get_disp_span_finish (
    MvMvappOsdServer *proxy,
    gint *out_output_array,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean mv_mvapp_osd_server_call_disposd__get_disp_span_sync (
    MvMvappOsdServer *proxy,
    gint arg_input_array,
    gint *out_output_array,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void mv_mvapp_osd_server_call_disposd__set_disp_span (
    MvMvappOsdServer *proxy,
    gint arg_input_array,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mv_mvapp_osd_server_call_disposd__set_disp_span_finish (
    MvMvappOsdServer *proxy,
    gint *out_output_array,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean mv_mvapp_osd_server_call_disposd__set_disp_span_sync (
    MvMvappOsdServer *proxy,
    gint arg_input_array,
    gint *out_output_array,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void mv_mvapp_osd_server_call_disposd__set_msg (
    MvMvappOsdServer *proxy,
    gint arg_input_array,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean mv_mvapp_osd_server_call_disposd__set_msg_finish (
    MvMvappOsdServer *proxy,
    gint *out_output_array,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean mv_mvapp_osd_server_call_disposd__set_msg_sync (
    MvMvappOsdServer *proxy,
    gint arg_input_array,
    gint *out_output_array,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_MV_MVAPP_OSD_SERVER_PROXY (mv_mvapp_osd_server_proxy_get_type ())
#define MV_MVAPP_OSD_SERVER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MV_MVAPP_OSD_SERVER_PROXY, MvMvappOsdServerProxy))
#define MV_MVAPP_OSD_SERVER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MV_MVAPP_OSD_SERVER_PROXY, MvMvappOsdServerProxyClass))
#define MV_MVAPP_OSD_SERVER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MV_MVAPP_OSD_SERVER_PROXY, MvMvappOsdServerProxyClass))
#define IS_MV_MVAPP_OSD_SERVER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MV_MVAPP_OSD_SERVER_PROXY))
#define IS_MV_MVAPP_OSD_SERVER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MV_MVAPP_OSD_SERVER_PROXY))

typedef struct _MvMvappOsdServerProxy MvMvappOsdServerProxy;
typedef struct _MvMvappOsdServerProxyClass MvMvappOsdServerProxyClass;
typedef struct _MvMvappOsdServerProxyPrivate MvMvappOsdServerProxyPrivate;

struct _MvMvappOsdServerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  MvMvappOsdServerProxyPrivate *priv;
};

struct _MvMvappOsdServerProxyClass
{
  GDBusProxyClass parent_class;
};

GType mv_mvapp_osd_server_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MvMvappOsdServerProxy, g_object_unref)
#endif

void mv_mvapp_osd_server_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MvMvappOsdServer *mv_mvapp_osd_server_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
MvMvappOsdServer *mv_mvapp_osd_server_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void mv_mvapp_osd_server_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MvMvappOsdServer *mv_mvapp_osd_server_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
MvMvappOsdServer *mv_mvapp_osd_server_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_MV_MVAPP_OSD_SERVER_SKELETON (mv_mvapp_osd_server_skeleton_get_type ())
#define MV_MVAPP_OSD_SERVER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MV_MVAPP_OSD_SERVER_SKELETON, MvMvappOsdServerSkeleton))
#define MV_MVAPP_OSD_SERVER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MV_MVAPP_OSD_SERVER_SKELETON, MvMvappOsdServerSkeletonClass))
#define MV_MVAPP_OSD_SERVER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MV_MVAPP_OSD_SERVER_SKELETON, MvMvappOsdServerSkeletonClass))
#define IS_MV_MVAPP_OSD_SERVER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MV_MVAPP_OSD_SERVER_SKELETON))
#define IS_MV_MVAPP_OSD_SERVER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MV_MVAPP_OSD_SERVER_SKELETON))

typedef struct _MvMvappOsdServerSkeleton MvMvappOsdServerSkeleton;
typedef struct _MvMvappOsdServerSkeletonClass MvMvappOsdServerSkeletonClass;
typedef struct _MvMvappOsdServerSkeletonPrivate MvMvappOsdServerSkeletonPrivate;

struct _MvMvappOsdServerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MvMvappOsdServerSkeletonPrivate *priv;
};

struct _MvMvappOsdServerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType mv_mvapp_osd_server_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MvMvappOsdServerSkeleton, g_object_unref)
#endif

MvMvappOsdServer *mv_mvapp_osd_server_skeleton_new (void);


G_END_DECLS

#endif /* __MV_OSD_INTERFACE_H__ */
