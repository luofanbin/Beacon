/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp /home/beacon/11/OSD_Widget/IFX/mvObjIFMethodVidSig.xml -i mvobj.h -p /home/beacon/11/OSD_Widget/IFX/mvObjIFMethodVidSig
 *
 * qdbusxml2cpp is Copyright (C) 2019 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MVOBJIFMETHODVIDSIG_H
#define MVOBJIFMETHODVIDSIG_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "mvobj.h"

/*
 * Proxy class for interface mv.mvapp.vidsig.disp
 */
class MvMvappVidsigDispInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "mv.mvapp.vidsig.disp"; }

public:
    MvMvappVidsigDispInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MvMvappVidsigDispInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> VinDispAutoSet(stAuto_INFO sigid_type_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_type_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispAutoSet"), argumentList);
    }

    inline QDBusPendingReply<> VinDispClearAllPreset(uchar sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispClearAllPreset"), argumentList);
    }

    inline QDBusPendingReply<> VinDispClearAnalogModeIndexTable()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("VinDispClearAnalogModeIndexTable"), argumentList);
    }

    inline QDBusPendingReply<> VinDispDebugAnalogParams(stSCAL_ANALOG_MODE_PARAMS sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispDebugAnalogParams"), argumentList);
    }

    inline QDBusPendingReply<stSCAL_ANALOG_INPUT_PARAMS> VinDispGetAnalogInputParams()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetAnalogInputParams"), argumentList);
    }

    inline QDBusPendingReply<int> VinDispGetAutoSet()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetAutoSet"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinDispGetBitsPerPixel(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetBitsPerPixel"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinDispGetBkLight(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetBkLight"), argumentList);
    }

    inline QDBusPendingReply<stDISP_COLORTEMP> VinDispGetCTemp(stVALUE_INFO sigid_flag)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_flag);
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetCTemp"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinDispGetColor(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetColor"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinDispGetContrast(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetContrast"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinDispGetDither(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetDither"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinDispGetGamma(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetGamma"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinDispGetHue(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetHue"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinDispGetLightness(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetLightness"), argumentList);
    }

    inline QDBusPendingReply<int> VinDispGetOverlayCtrlMethod()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetOverlayCtrlMethod"), argumentList);
    }

    inline QDBusPendingReply<stSCAL_PRESET_PARAMS_INFO> VinDispGetPresetParams(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetPresetParams"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinDispGetSharpness(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinDispGetSharpness"), argumentList);
    }

    inline QDBusPendingReply<stAnalogOverlayCount, stSCAL_ANALOG_MODE_PARAMS_Index_Array> VinDispQtGetAnalogOverlay()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("VinDispQtGetAnalogOverlay"), argumentList);
    }
    inline QDBusReply<stAnalogOverlayCount> VinDispQtGetAnalogOverlay(stSCAL_ANALOG_MODE_PARAMS_Index_Array &output_garray_)
    {
        QList<QVariant> argumentList;
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("VinDispQtGetAnalogOverlay"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            output_garray_ = qdbus_cast<stSCAL_ANALOG_MODE_PARAMS_Index_Array>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<> VinDispRestoreCurrentPreset(uchar sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispRestoreCurrentPreset"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSaveCurrentPreset(uchar sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSaveCurrentPreset"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSelectNextPreset(uchar sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSelectNextPreset"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetAnalogModeDebug(int sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetAnalogModeDebug"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetAnalogOverlay(int sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetAnalogOverlay"), argumentList);
    }

    inline QDBusPendingReply<int> VinDispSetAnalogParams(stSCAL_ANALOG_MODE_PARAMS sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetAnalogParams"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetBitsPerPixel(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetBitsPerPixel"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetBkLight(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetBkLight"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetCTemp(stDISP_COLORTEMP sigid_val_r_g_b)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val_r_g_b);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetCTemp"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetColor(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetColor"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetContrast(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetContrast"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetDither(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetDither"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetGamma(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetGamma"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetHue(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetHue"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetLightness(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetLightness"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetOverlayCtrlMethod(int val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetOverlayCtrlMethod"), argumentList);
    }

    inline QDBusPendingReply<> VinDispSetSharpness(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinDispSetSharpness"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void SigVinDispSetBitsPerPixel(stVALUE_INFO sigid_val);
    void SigVinDispSetBkLight(stVALUE_INFO sigid_val);
    void SigVinDispSetCTemp(stDISP_COLORTEMP sigid_val_r_g_b);
    void SigVinDispSetColor(stVALUE_INFO sigid_val);
    void SigVinDispSetContrast(stVALUE_INFO sigid_val);
    void SigVinDispSetDither(stVALUE_INFO sigid_val);
    void SigVinDispSetGamma(stVALUE_INFO sigid_val);
    void SigVinDispSetHue(stVALUE_INFO sigid_val);
    void SigVinDispSetLightness(stVALUE_INFO sigid_val);
    void SigVinDispSetOverlayCtrlMethod(int val);
    void SigVinDispSetSharpness(stVALUE_INFO sigid_val);
};

/*
 * Proxy class for interface mv.mvapp.vidsig.vin
 */
class MvMvappVidsigVinInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "mv.mvapp.vidsig.vin"; }

public:
    MvMvappVidsigVinInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MvMvappVidsigVinInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<stRouter> VinSetRouteAfterScan()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("VinSetRouteAfterScan"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinSigGetAnalogType(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetAnalogType"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinSigGetBandWidth(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetBandWidth"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinSigGetClampWidth(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetClampWidth"), argumentList);
    }

    inline QDBusPendingReply<stSCAL_INPUT_DP_INFO> VinSigGetDpDbgInfo(gtSCAL_INPUT_DP_INFO sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetDpDbgInfo"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinSigGetFHFreq(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetFHFreq"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinSigGetFVFreq(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetFVFreq"), argumentList);
    }

    inline QDBusPendingReply<gtFrequency_INFO> VinSigGetFrequency(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetFrequency"), argumentList);
    }

    inline QDBusPendingReply<stVStart> VinSigGetHStart(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetHStart"), argumentList);
    }

    inline QDBusPendingReply<stSTRVALUE_INFO> VinSigGetName(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetName"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinSigGetNoiseReduction(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetNoiseReduction"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinSigGetOnOff(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetOnOff"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinSigGetPhase(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetPhase"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinSigGetPixClk(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetPixClk"), argumentList);
    }

    inline QDBusPendingReply<stResolution_INFO> VinSigGetResolution(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetResolution"), argumentList);
    }

    inline QDBusPendingReply<stVIDSIGIN_STATUS_ARRAY> VinSigGetStatus(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetStatus"), argumentList);
    }

    inline QDBusPendingReply<stVStart> VinSigGetVStart(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetVStart"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VinSigGetVidFmtPN(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VinSigGetVidFmtPN"), argumentList);
    }

    inline QDBusPendingReply<> VinSigScan(stScan_INFO sigid_time)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_time);
        return asyncCallWithArgumentList(QStringLiteral("VinSigScan"), argumentList);
    }

    inline QDBusPendingReply<> VinSigScanAbort(uchar sigid_time)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_time);
        return asyncCallWithArgumentList(QStringLiteral("VinSigScanAbort"), argumentList);
    }

    inline QDBusPendingReply<> VinSigSetAnalogType(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinSigSetAnalogType"), argumentList);
    }

    inline QDBusPendingReply<> VinSigSetBandWidth(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinSigSetBandWidth"), argumentList);
    }

    inline QDBusPendingReply<> VinSigSetClampWidth(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinSigSetClampWidth"), argumentList);
    }

    inline QDBusPendingReply<> VinSigSetDpDbgInfo(stSCAL_INPUT_DP_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinSigSetDpDbgInfo"), argumentList);
    }

    inline QDBusPendingReply<> VinSigSetFrequency(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinSigSetFrequency"), argumentList);
    }

    inline QDBusPendingReply<> VinSigSetHStart(stHVStart sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinSigSetHStart"), argumentList);
    }

    inline QDBusPendingReply<> VinSigSetName(stSTRVALUE_INFO sigid_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_name);
        return asyncCallWithArgumentList(QStringLiteral("VinSigSetName"), argumentList);
    }

    inline QDBusPendingReply<> VinSigSetNoiseReduction(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinSigSetNoiseReduction"), argumentList);
    }

    inline QDBusPendingReply<> VinSigSetOnOff(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinSigSetOnOff"), argumentList);
    }

    inline QDBusPendingReply<> VinSigSetPhase(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinSigSetPhase"), argumentList);
    }

    inline QDBusPendingReply<> VinSigSetVStart(stHVStart sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VinSigSetVStart"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void SigVinSetRouteAfterScan(stRouter route_id_val);
    void SigVinSigScan(stScan sigid_valid_framw_framh_fvfreq_fhfreq_pixclk_intlace);
    void SigVinSigScanAbort(uchar route_id_val);
    void SigVinSigSetAnalogType(stVALUE_INFO sigid_val);
    void SigVinSigSetBandWidth(stVALUE_INFO sigid_val);
    void SigVinSigSetClampWidth(stVALUE_INFO sigid_val);
    void SigVinSigSetFrequency(stVALUE_INFO sigid_val);
    void SigVinSigSetHStart(stHVStart sigid_val);
    void SigVinSigSetName(stSTRVALUE_INFO sigid_name);
    void SigVinSigSetNoiseReduction(stVALUE_INFO sigid_val);
    void SigVinSigSetOnOff(stVALUE_INFO sigid_val);
    void SigVinSigSetPhase(stVALUE_INFO sigid_val);
    void SigVinSigSetVStart(stHVStart sigid_val);
};

/*
 * Proxy class for interface mv.mvapp.vidsig.vout
 */
class MvMvappVidsigVoutInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "mv.mvapp.vidsig.vout"; }

public:
    MvMvappVidsigVoutInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MvMvappVidsigVoutInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<stVALUE_INFO> VoutSigGetFVFreq(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigGetFVFreq"), argumentList);
    }

    inline QDBusPendingReply<stSTRVALUE_INFO> VoutSigGetName(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigGetName"), argumentList);
    }

    inline QDBusPendingReply<stResolution_INFO> VoutSigGetResolution(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigGetResolution"), argumentList);
    }

    inline QDBusPendingReply<stVIDGOUT_SCAL> VoutSigGetScaling(stVALUE_INFO sigid_flag)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_flag);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigGetScaling"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VoutSigGetSigFormat(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigGetSigFormat"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO> VoutSigGetSmartLock(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigGetSmartLock"), argumentList);
    }

    inline QDBusPendingReply<stVALUE_INFO_ARRAY> VoutSigGetStatus(int sigid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigGetStatus"), argumentList);
    }

    inline QDBusPendingReply<> VoutSigSetFVFreq(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigSetFVFreq"), argumentList);
    }

    inline QDBusPendingReply<> VoutSigSetName(stSTRVALUE_INFO sigid_name)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_name);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigSetName"), argumentList);
    }

    inline QDBusPendingReply<> VoutSigSetResolution(stResolution_INFO sigid_frameSiz)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_frameSiz);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigSetResolution"), argumentList);
    }

    inline QDBusPendingReply<> VoutSigSetScaling(stVIDGOUT_SCAL sigid_scalval_sizv_sizh)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_scalval_sizv_sizh);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigSetScaling"), argumentList);
    }

    inline QDBusPendingReply<> VoutSigSetSigFormat(stVALUE_INFO sigid_formatid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_formatid);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigSetSigFormat"), argumentList);
    }

    inline QDBusPendingReply<> VoutSigSetSmartLock(stVALUE_INFO sigid_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sigid_val);
        return asyncCallWithArgumentList(QStringLiteral("VoutSigSetSmartLock"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void SigVoutSigSetFVFreq(stVALUE_INFO sigid_val);
    void SigVoutSigSetName(stSTRVALUE_INFO sigid_name);
    void SigVoutSigSetResolution(stResolution_INFO sigid_frameSiz);
    void SigVoutSigSetScaling(stVIDGOUT_SCAL sigid_scalval_sizv_sizh);
    void SigVoutSigSetSigFormat(stVALUE_INFO sigid_formatid);
    void SigVoutSigSetSmartLock(stVALUE_INFO sigid_val);
};

namespace mv {
  namespace mvapp {
    namespace vidsig {
      typedef ::MvMvappVidsigDispInterface disp;
      typedef ::MvMvappVidsigVinInterface vin;
      typedef ::MvMvappVidsigVoutInterface vout;
    }
  }
}
#endif
