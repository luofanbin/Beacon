/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp /home/beacon/Qt/OSD_Widget/IFX/mvObjIFMethodComm.xml -i mvobj.h -p /home/beacon/Qt/OSD_Widget/IFX/mvObjIFMethodComm
 *
 * qdbusxml2cpp is Copyright (C) 2019 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MVOBJIFMETHODCOMM_H
#define MVOBJIFMETHODCOMM_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "mvobj.h"

/*
 * Proxy class for interface mv.mvapp.comm.net
 */
class MvMvappCommNetInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "mv.mvapp.comm.net"; }

public:
    MvMvappCommNetInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~MvMvappCommNetInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<int> GetCmdNetPort()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetCmdNetPort"), argumentList);
    }

    inline QDBusPendingReply<int> GetCmdNetSelect()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetCmdNetSelect"), argumentList);
    }

    inline QDBusPendingReply<stDEVCOMM_NET> GetNet(int netid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(netid);
        return asyncCallWithArgumentList(QStringLiteral("GetNet"), argumentList);
    }

    inline QDBusPendingReply<stDEVCOMM_HDCP> GetNetHdcp(int netid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(netid);
        return asyncCallWithArgumentList(QStringLiteral("GetNetHdcp"), argumentList);
    }

    inline QDBusPendingReply<stDEVCOMM_HDCP> GetNetHpd(int netid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(netid);
        return asyncCallWithArgumentList(QStringLiteral("GetNetHpd"), argumentList);
    }

    inline QDBusPendingReply<stDEVCOMM_MAC> GetNetMac(int netid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(netid);
        return asyncCallWithArgumentList(QStringLiteral("GetNetMac"), argumentList);
    }

    inline QDBusPendingReply<> SetCmdNetPort(int net_portnum)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(net_portnum);
        return asyncCallWithArgumentList(QStringLiteral("SetCmdNetPort"), argumentList);
    }

    inline QDBusPendingReply<> SetCmdNetSelect(int select_netid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(select_netid);
        return asyncCallWithArgumentList(QStringLiteral("SetCmdNetSelect"), argumentList);
    }

    inline QDBusPendingReply<> SetNet(stDEVCOMM_NET netid_info)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(netid_info);
        return asyncCallWithArgumentList(QStringLiteral("SetNet"), argumentList);
    }

    inline QDBusPendingReply<> SetNetHdcp(stDEVCOMM_HDCP netid_hdcp)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(netid_hdcp);
        return asyncCallWithArgumentList(QStringLiteral("SetNetHdcp"), argumentList);
    }

    inline QDBusPendingReply<> SetNetHpd(stDEVCOMM_HDCP netid_hpd)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(netid_hpd);
        return asyncCallWithArgumentList(QStringLiteral("SetNetHpd"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void SignalCmdNetPort(int net_portnum);
    void SignalCmdNetSelect(int select_netid);
    void SignalNet(stDEVCOMM_NET signalnetid_info);
    void SignalNetHdcp(stDEVCOMM_HDCP Signalnetid_hdcp);
    void SignalNetHpd(stDEVCOMM_HDCP signalnetid_hpd);
};

namespace mv {
  namespace mvapp {
    namespace comm {
      typedef ::MvMvappCommNetInterface net;
    }
  }
}
#endif
